//////////////////////////////////////////////////////////////////////////////////////////
// Generated By:	MCIT-B51303A24F\Administrator using Mcit Generator
// Class Name:		course_employee_DB
// Date Generated:	19-02-2012
//////////////////////////////////////////////////////////////////////////////////////////
using System;
using System.Data.SqlClient;
using System.Data;
using System.Collections.Generic;


public static class course_employee_DB
{

    #region "Private methods"

    private static course_employee_DT FillInfoObject(SqlDataReader dr)
    {

        course_employee_DT obj_course_employee_DT = new course_employee_DT();


        obj_course_employee_DT.id = Convert.ToInt32(dr[course_employee_DT.Enum_course_employee_DT.id.ToString()]);
        obj_course_employee_DT.course_id = dr[course_employee_DT.Enum_course_employee_DT.course_id.ToString()] == DBNull.Value ? 0 : Convert.ToInt32(dr[course_employee_DT.Enum_course_employee_DT.course_id.ToString()]);
        obj_course_employee_DT.emp_id = dr[course_employee_DT.Enum_course_employee_DT.emp_id.ToString()] == DBNull.Value ? 0 : Convert.ToInt32(dr[course_employee_DT.Enum_course_employee_DT.emp_id.ToString()]);
        obj_course_employee_DT.course_details_id = dr[course_employee_DT.Enum_course_employee_DT.course_details_id.ToString()] == DBNull.Value ? 0 : Convert.ToInt32(dr[course_employee_DT.Enum_course_employee_DT.course_details_id.ToString()]);
        obj_course_employee_DT.is_admin_approved = dr[course_employee_DT.Enum_course_employee_DT.is_admin_approved.ToString()] == DBNull.Value ? false : Convert.ToBoolean(dr[course_employee_DT.Enum_course_employee_DT.is_admin_approved.ToString()]);
        obj_course_employee_DT.status = dr[course_employee_DT.Enum_course_employee_DT.status.ToString()] == DBNull.Value ? string.Empty : Convert.ToString(dr[course_employee_DT.Enum_course_employee_DT.status.ToString()]);
        obj_course_employee_DT.comment = dr[course_employee_DT.Enum_course_employee_DT.comment.ToString()] == DBNull.Value ? string.Empty : Convert.ToString(dr[course_employee_DT.Enum_course_employee_DT.comment.ToString()]);
        obj_course_employee_DT.converted_to_course = dr[course_employee_DT.Enum_course_employee_DT.converted_to_course.ToString()] == DBNull.Value ? 0 : Convert.ToInt32(dr[course_employee_DT.Enum_course_employee_DT.converted_to_course.ToString()]);
        obj_course_employee_DT.rejected_reason_id = dr[course_employee_DT.Enum_course_employee_DT.rejected_reason_id.ToString()] == DBNull.Value ? 0 : Convert.ToInt32(dr[course_employee_DT.Enum_course_employee_DT.rejected_reason_id.ToString()]);
        obj_course_employee_DT.admin_descion = dr[course_employee_DT.Enum_course_employee_DT.admin_descion.ToString()] == DBNull.Value ? 0 : Convert.ToInt32(dr[course_employee_DT.Enum_course_employee_DT.admin_descion.ToString()]);
        obj_course_employee_DT.result = dr[course_employee_DT.Enum_course_employee_DT.result.ToString()] == DBNull.Value ? 0 : Convert.ToInt32(dr[course_employee_DT.Enum_course_employee_DT.result.ToString()]);
        obj_course_employee_DT.result_file = dr[course_employee_DT.Enum_course_employee_DT.result_file.ToString()] == DBNull.Value ? string.Empty : Convert.ToString((dr[course_employee_DT.Enum_course_employee_DT.result_file.ToString()]));
        return obj_course_employee_DT;
    }

    private static SqlParameter[] GetParameters(course_employee_DT obj)
    {
        SqlParameter[] parms = new SqlParameter[12];




        parms[0] = new SqlParameter(course_employee_DT.Enum_course_employee_DT.id.ToString(), obj.id);
        parms[0].Direction = ParameterDirection.InputOutput;

        parms[1] = new SqlParameter(course_employee_DT.Enum_course_employee_DT.course_id.ToString(), obj.course_id);

        parms[2] = new SqlParameter(course_employee_DT.Enum_course_employee_DT.emp_id.ToString(), obj.emp_id);

        parms[3] = new SqlParameter(course_employee_DT.Enum_course_employee_DT.course_details_id.ToString(), obj.course_details_id);

        parms[4] = new SqlParameter(course_employee_DT.Enum_course_employee_DT.is_admin_approved.ToString(), obj.is_admin_approved);

        parms[5] = new SqlParameter(course_employee_DT.Enum_course_employee_DT.status.ToString(), obj.status);
        parms[6] = new SqlParameter(course_employee_DT.Enum_course_employee_DT.comment.ToString(), obj.comment);
        parms[7] = new SqlParameter(course_employee_DT.Enum_course_employee_DT.converted_to_course.ToString(), obj.converted_to_course);

        parms[8] = new SqlParameter(course_employee_DT.Enum_course_employee_DT.rejected_reason_id.ToString(), obj.rejected_reason_id);
        parms[9] = new SqlParameter(course_employee_DT.Enum_course_employee_DT.admin_descion.ToString(), obj.admin_descion);
        parms[10] = new SqlParameter(course_employee_DT.Enum_course_employee_DT.result.ToString(), obj.result);
        parms[11] = new SqlParameter(course_employee_DT.Enum_course_employee_DT.result_file.ToString(), obj.result_file);
        return parms;
    }

    #endregion

    #region "DB methods"

    public static int Save(course_employee_DT obj)
    {
        try
        {
            SqlParameter[] parms = GetParameters(obj);

            SqlHelper.ExecuteScalar(Database.ConnectionString, CommandType.StoredProcedure, "course_employee_Save", parms);
            return Convert.ToInt32(parms[0].Value);
        }
        catch (Exception ex)
        {

            return -1;
        }
    }

    public static int Delete(int course_employee_ID)
    {
        try
        {
            SqlHelper.ExecuteNonQuery(Database.ConnectionString, "course_employee_Delete", course_employee_ID);
            return course_employee_ID;
        }
        catch (Exception ex)
        {

            return -1;
        }
    }

    public static DataTable SelectAll()
    {
        try
        {
            return SqlHelper.ExecuteDataset(Database.ConnectionString, "course_employee_Select", 0).Tables[0];

        }
        catch (Exception ex)
        {

            return null;
        }
    }

    public static course_employee_DT SelectByID(int course_employee_ID)
    {
        try
        {
            SqlDataReader drTableName;
            course_employee_DT oInfo_course_employee_DT = new course_employee_DT();
            if (course_employee_ID > 0)
            {


                drTableName = SqlHelper.ExecuteReader(Database.ConnectionString, "course_employee_Select", course_employee_ID);
                if (drTableName != null)
                {
                    while (drTableName.Read())
                    {
                        oInfo_course_employee_DT = FillInfoObject(drTableName);
                    }

                    drTableName.Close();
                }
            }
            return oInfo_course_employee_DT;
        }
        catch (Exception ex)
        {

            return null;
        }
    }
    public static int deleteByempid(int emp_id, int course_id)
    {
        try
        {
            SqlHelper.ExecuteNonQuery(Database.ConnectionString, "course_employee_Delete_by_emp_id", emp_id, course_id);
            return emp_id;

        }
        catch (Exception ex)
        {
            return -1;

        }
    }
    public static course_employee_DT ViewUserRequest()
    {
        SqlDataReader drTableName;
        course_employee_DT oInfo_course_employee_DT = new course_employee_DT();

        drTableName = SqlHelper.ExecuteReader(Database.ConnectionString, "courseviewuserrequests");
        if (drTableName != null)
        {
            while (drTableName.Read())
            {
                oInfo_course_employee_DT = FillInfoObject(drTableName);
            }

            drTableName.Close();
        }
        return oInfo_course_employee_DT;



    }
    public static void updateemployeestatus(int id, string status, string comment)
    {
        SqlParameter[] parms = new SqlParameter[4];

        parms[0] = new SqlParameter();
        parms[0].Direction = ParameterDirection.Input;
        parms[0].Value = id;
        parms[0].ParameterName = "@id";
        parms[0].SqlDbType = SqlDbType.Int;
        parms[0].Size = 4;
        parms[1] = new SqlParameter();
        parms[1].Direction = ParameterDirection.Input;
        parms[1].Value = status;
        parms[1].ParameterName = "@status";
        parms[1].SqlDbType = SqlDbType.Int;
        parms[1].Size = 4;

        parms[2] = new SqlParameter();
        parms[2].Direction = ParameterDirection.Input;
        parms[2].Value = comment;
        parms[2].ParameterName = "@comment";
        parms[2].SqlDbType = SqlDbType.NVarChar;
        parms[2].Size = 200;




        SqlHelper.ExecuteScalar(Database.ConnectionString, CommandType.StoredProcedure, "courseemployeeupdatestatus", parms);

    }


    public static void updateemployeestatus1(int course_id, int emp_id, string status, string comment)
    {
        SqlParameter[] parms = new SqlParameter[4];

        parms[0] = new SqlParameter();
        parms[0].Direction = ParameterDirection.Input;
        parms[0].Value = course_id;
        parms[0].ParameterName = "@course_id";
        parms[0].SqlDbType = SqlDbType.Int;
        parms[0].Size = 4;
        parms[1] = new SqlParameter();
        parms[1].Direction = ParameterDirection.Input;
        parms[1].Value = emp_id;
        parms[1].ParameterName = "@emp_id";
        parms[1].SqlDbType = SqlDbType.Int;
        parms[1].Size = 4;

        parms[2] = new SqlParameter();
        parms[2].Direction = ParameterDirection.Input;
        parms[2].Value = status;
        parms[2].ParameterName = "@status";
        parms[2].SqlDbType = SqlDbType.NVarChar;
        parms[2].Size = 200;

        parms[3] = new SqlParameter();
        parms[3].Direction = ParameterDirection.Input;
        parms[3].Value = comment;
        parms[3].ParameterName = "@comment";
        parms[3].SqlDbType = SqlDbType.NVarChar;
        parms[3].Size = 1500;


        SqlHelper.ExecuteScalar(Database.ConnectionString, CommandType.StoredProcedure, "course_employee_update_status", parms);

    }

    public static void updateemployeecoursedetails(int id, int course_details_id)
    {
        SqlParameter[] parms = new SqlParameter[2];

        parms[0] = new SqlParameter();
        parms[0].Direction = ParameterDirection.Input;
        parms[0].Value = id;
        parms[0].ParameterName = "@id";
        parms[0].SqlDbType = SqlDbType.Int;
        parms[0].Size = 4;

        parms[1] = new SqlParameter();
        parms[1].Direction = ParameterDirection.Input;
        parms[1].Value = course_details_id;
        parms[1].ParameterName = "@course_details_id";
        parms[1].SqlDbType = SqlDbType.Int;
        parms[1].Size = 4;

        SqlHelper.ExecuteScalar(Database.ConnectionString, CommandType.StoredProcedure, "courseemployeeupdatecoursedetails", parms);

    }
    public static void updateadminapproval(int id, string status, int converted_course_id, int rejected_reason_id)
    {
        SqlParameter[] parms = new SqlParameter[4];

        parms[0] = new SqlParameter();
        parms[0].Direction = ParameterDirection.Input;
        parms[0].Value = id;
        parms[0].ParameterName = "@id";
        parms[0].SqlDbType = SqlDbType.Int;
        parms[0].Size = 4;

        parms[1] = new SqlParameter();
        parms[1].Direction = ParameterDirection.Input;
        parms[1].Value = status;
        parms[1].ParameterName = "@status";
        parms[1].SqlDbType = SqlDbType.NVarChar;
        parms[1].Size = 50;


        parms[2] = new SqlParameter();
        parms[2].Direction = ParameterDirection.Input;
        parms[2].Value = converted_course_id;
        parms[2].ParameterName = "@converted_course_id";
        parms[2].SqlDbType = SqlDbType.Int;
        parms[2].Size = 4;


        parms[3] = new SqlParameter();
        parms[3].Direction = ParameterDirection.Input;
        parms[3].Value = rejected_reason_id;
        parms[3].ParameterName = "@rejected_reason_id";
        parms[3].SqlDbType = SqlDbType.Int;
        parms[3].Size = 4;
        SqlHelper.ExecuteScalar(Database.ConnectionString, CommandType.StoredProcedure, "Course_adminapproval", parms);

    }

    public static DataTable Select_Admin_Select(int course_id)
    {

        try
        {
            return SqlHelper.ExecuteDataset(Database.ConnectionString, "course_adminselect", course_id).Tables[0];

        }
        catch (Exception ex)
        {

            return null;
        }



    }

    public static DataTable Select_Adminresult_Select(int course_id)
    {

        try
        {
            return SqlHelper.ExecuteDataset(Database.ConnectionString, "course_adminselect_result", course_id).Tables[0];

        }
        catch (Exception ex)
        {

            return null;
        }



    }

    public static void updateemployeeresult(int course_emp_id, int result)
    {
        SqlParameter[] parms = new SqlParameter[2];

        parms[0] = new SqlParameter();
        parms[0].Direction = ParameterDirection.Input;
        parms[0].Value = course_emp_id;
        parms[0].ParameterName = "@id";
        parms[0].SqlDbType = SqlDbType.Int;
        parms[0].Size = 4;

        parms[1] = new SqlParameter();
        parms[1].Direction = ParameterDirection.Input;
        parms[1].Value = result;
        parms[1].ParameterName = "@result";
        parms[1].SqlDbType = SqlDbType.Int;
        parms[1].Size = 4;

        SqlHelper.ExecuteScalar(Database.ConnectionString, CommandType.StoredProcedure, "courseemployeeupdateemployeecourseresult", parms);

    }
    public static course_employee_DT viewuserresult(int id)
    {
        try
        {
            SqlDataReader drTableName;
            course_employee_DT oInfo_course_employee_DT = new course_employee_DT();

            drTableName = SqlHelper.ExecuteReader(Database.ConnectionString, "course_adminselectuserresult", id);
            if (drTableName != null)
            {
                while (drTableName.Read())
                {
                    oInfo_course_employee_DT = FillInfoObject(drTableName);
                }

                drTableName.Close();
            }
            return oInfo_course_employee_DT;
        }
        catch (Exception ex)
        {

            return null;
        }
    }

}
    #endregion




