//////////////////////////////////////////////////////////////////////////////////////////
// Generated By:	MCIT\MElshahed using Mcit Generator
// Class Name:		Courses_DB
// Date Generated:	01-08-2012
//////////////////////////////////////////////////////////////////////////////////////////
using System;
using System.Data.SqlClient;
using System.Data;


    public static class Courses_DB
    {

        #region "Private methods"

        private static Courses_DT FillInfoObject(SqlDataReader dr)
        {

           Courses_DT obj_Courses_DT = new Courses_DT();

           
		obj_Courses_DT.course_id = Convert.ToInt32(dr[Courses_DT.Enum_Courses_DT.course_id.ToString()]);
		obj_Courses_DT.prog_id = dr[Courses_DT.Enum_Courses_DT.prog_id.ToString()] == DBNull.Value ? 0 : Convert.ToInt32(dr[Courses_DT.Enum_Courses_DT.prog_id.ToString()]);
		obj_Courses_DT.course_name = dr[Courses_DT.Enum_Courses_DT.course_name.ToString()] == DBNull.Value ? string.Empty : Convert.ToString(dr[Courses_DT.Enum_Courses_DT.course_name.ToString()]);

           return obj_Courses_DT;
        }

        private static SqlParameter[] GetParameters(Courses_DT obj)
        {
            SqlParameter[] parms = new SqlParameter[3];
           
			
        

        parms[0] = new SqlParameter(Courses_DT.Enum_Courses_DT.course_id.ToString(), obj.course_id);
        parms[0].Direction = ParameterDirection.InputOutput;

        parms[1] = new SqlParameter(Courses_DT.Enum_Courses_DT.prog_id.ToString(), obj.prog_id);

        parms[2] = new SqlParameter(Courses_DT.Enum_Courses_DT.course_name.ToString(), obj.course_name);
            
            return parms;
        }

        #endregion

	    #region "DB methods"

        public static int Save(Courses_DT obj)
        {
            try
            {
                SqlParameter[] parms = GetParameters(obj);

                SqlHelper.ExecuteScalar(Database.ConnectionString, CommandType.StoredProcedure, "Courses_Save", parms);

             	    obj.course_id = Convert.ToInt32(parms[0].Value) ; 

           return obj.course_id ;
            }
            catch (Exception ex)
            {

                return -1;
            }
        }

        public static int Delete(int Courses_ID)
        {
            try
            {
                SqlHelper.ExecuteNonQuery(Database.ConnectionString, "Courses_Delete", Courses_ID);
                return Courses_ID;
            }
            catch (Exception ex)
            {

                return -1;
            }
        }

        public static DataTable SelectAll(int Courses_ID,int prog_id)
        {
            try
            {
                return SqlHelper.ExecuteDataset(Database.ConnectionString, "Courses_Select", Courses_ID, prog_id).Tables[0];
		
            }
            catch (Exception ex)
            {

                return null;
            }
        }


        public static DataTable SelectAll_courses()
        {
            try
            {
                return SqlHelper.ExecuteDataset(Database.ConnectionString, "course_Selectall",0).Tables[0];

            }
            catch (Exception ex)
            {

                return null;
            }
        }
      


        public static Courses_DT SelectByID(int Courses_ID,int prog_id)
        {
            try
            {
              if (Courses_ID > 0)
                {
                SqlDataReader drTableName;
                Courses_DT oInfo_Courses_DT = new Courses_DT();

                drTableName = SqlHelper.ExecuteReader(Database.ConnectionString, "Courses_Select", Courses_ID,prog_id );
                if (drTableName != null)
                {
                    while (drTableName.Read())
                    {
                        oInfo_Courses_DT = FillInfoObject(drTableName);
                    }

                    drTableName.Close();
                }
                return oInfo_Courses_DT;
               }
                else
                    return new Courses_DT();
            }
            catch (Exception ex)
            {

                return null;
            }
        }
	#endregion


    }

