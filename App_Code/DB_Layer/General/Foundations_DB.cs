//////////////////////////////////////////////////////////////////////////////////////////
// Generated By:	MCIT\MElshahed using Mcit Generator
// Class Name:		Foundations_DB
// Date Generated:	07-11-2013
//////////////////////////////////////////////////////////////////////////////////////////
using System;
using System.Data.SqlClient;
using System.Data;


    public static class Foundations_DB
    {

        #region "Private methods"

        private static Foundations_DT FillInfoObject(SqlDataReader dr)
        {

           Foundations_DT obj_Foundations_DT = new Foundations_DT();

           
		obj_Foundations_DT.Foundation_ID = Convert.ToInt32(dr[Foundations_DT.Enum_Foundations_DT.Foundation_ID.ToString()]);
		obj_Foundations_DT.Foundation_Name = dr[Foundations_DT.Enum_Foundations_DT.Foundation_Name.ToString()] == DBNull.Value ? string.Empty : Convert.ToString(dr[Foundations_DT.Enum_Foundations_DT.Foundation_Name.ToString()]);
        obj_Foundations_DT.code_archiving = dr[Foundations_DT.Enum_Foundations_DT.code_archiving.ToString()] == DBNull.Value ? 0 : Convert.ToInt32(dr[Foundations_DT.Enum_Foundations_DT.code_archiving.ToString()]);
        //obj_Foundations_DT.Port= Convert.ToInt32(dr[Foundations_DT.Enum_Foundations_DT.Port.ToString()]);

        obj_Foundations_DT.Port = dr[Foundations_DT.Enum_Foundations_DT.Port.ToString()] == DBNull.Value ? 0 : Convert.ToInt32(dr[Foundations_DT.Enum_Foundations_DT.Port.ToString()]);


        obj_Foundations_DT.Host = dr[Foundations_DT.Enum_Foundations_DT.Host.ToString()] == DBNull.Value ? string.Empty : Convert.ToString(dr[Foundations_DT.Enum_Foundations_DT.Host.ToString()]);
        obj_Foundations_DT.UserName_mail = dr[Foundations_DT.Enum_Foundations_DT.UserName_mail.ToString()] == DBNull.Value ? string.Empty : Convert.ToString(dr[Foundations_DT.Enum_Foundations_DT.UserName_mail.ToString()]);        
        obj_Foundations_DT.Password = dr[Foundations_DT.Enum_Foundations_DT.Password.ToString()] == DBNull.Value ? string.Empty : Convert.ToString(dr[Foundations_DT.Enum_Foundations_DT.Password.ToString()]);
        obj_Foundations_DT.FromAddress = dr[Foundations_DT.Enum_Foundations_DT.FromAddress.ToString()] == DBNull.Value ? string.Empty : Convert.ToString(dr[Foundations_DT.Enum_Foundations_DT.FromAddress.ToString()]);
       // obj_Foundations_DT.code_archiving = dr[Foundations_DT.Enum_Foundations_DT.code_archiving.ToString()] == DBNull.Value ? 0 : Convert.ToInt32(dr[Foundations_DT.Enum_Foundations_DT.code_archiving.ToString()]);
        obj_Foundations_DT.islocal = Convert.ToBoolean(dr[Foundations_DT.Enum_Foundations_DT.islocal.ToString()]);

        obj_Foundations_DT.connection_string  = dr[Foundations_DT.Enum_Foundations_DT.connection_string .ToString()] == DBNull.Value ? string.Empty : Convert.ToString(dr[Foundations_DT.Enum_Foundations_DT.connection_string.ToString()]);

           return obj_Foundations_DT;
        }

        private static SqlParameter[] GetParameters(Foundations_DT obj)
        {
            SqlParameter[] parms = new SqlParameter[10];
           
			
        

        parms[0] = new SqlParameter(Foundations_DT.Enum_Foundations_DT.Foundation_ID.ToString(), obj.Foundation_ID);
        parms[0].Direction = ParameterDirection.InputOutput;

        parms[1] = new SqlParameter(Foundations_DT.Enum_Foundations_DT.Foundation_Name.ToString(), obj.Foundation_Name);
        parms[2] = new SqlParameter(Foundations_DT.Enum_Foundations_DT.code_archiving.ToString(), obj.code_archiving);
        parms[3] = new SqlParameter(Foundations_DT.Enum_Foundations_DT.Port.ToString(), obj.Port);
        parms[4] = new SqlParameter(Foundations_DT.Enum_Foundations_DT.Host.ToString(), obj.Host);
        parms[5] = new SqlParameter(Foundations_DT.Enum_Foundations_DT.UserName_mail.ToString(), obj.UserName_mail);
        parms[6] = new SqlParameter(Foundations_DT.Enum_Foundations_DT.Password.ToString(), obj.Password);
        parms[7] = new SqlParameter(Foundations_DT.Enum_Foundations_DT.FromAddress.ToString(), obj.FromAddress);

        parms[8] = new SqlParameter(Foundations_DT.Enum_Foundations_DT.islocal.ToString(), obj.islocal);
        parms[9] = new SqlParameter(Foundations_DT.Enum_Foundations_DT.connection_string.ToString(), obj.connection_string);
            return parms;
        }

        #endregion

	    #region "DB methods"

        public static int Save(Foundations_DT obj)
        {
            try
            {
                SqlParameter[] parms = GetParameters(obj);

                SqlHelper.ExecuteScalar(Database.ConnectionString, CommandType.StoredProcedure, "Foundations_Save", parms);

             	    obj.Foundation_ID = Convert.ToInt32(parms[0].Value) ; 

           return obj.Foundation_ID ;
            }
            catch (Exception ex)
            {

                return -1;
            }
        }

        public static int Delete(int Foundations_ID)
        {
            try
            {
                SqlHelper.ExecuteNonQuery(Database.ConnectionString, "Foundations_Delete", Foundations_ID);
                return Foundations_ID;
            }
            catch (Exception ex)
            {

                return -1;
            }
        }

        public static DataTable SelectAll()
        {
            try
            {
				 return SqlHelper.ExecuteDataset(Database.ConnectionString, "Foundations_Select", 0).Tables[0];
		
            }
            catch (Exception ex)
            {

                return null;
            }
        }

        public static Foundations_DT SelectByID(int Foundations_ID)
        {
            try
            {
              if (Foundations_ID > 0)
                {
                SqlDataReader drTableName;
                Foundations_DT oInfo_Foundations_DT = new Foundations_DT();

                drTableName = SqlHelper.ExecuteReader(Database.ConnectionString, "Foundations_Select", Foundations_ID);
                if (drTableName != null)
                {
                    while (drTableName.Read())
                    {
                        oInfo_Foundations_DT = FillInfoObject(drTableName);
                    }

                    drTableName.Close();
                }
                return oInfo_Foundations_DT;
               }
                else
                    return new Foundations_DT();
            }
            catch (Exception ex)
            {

                return null;
            }
        }
	#endregion


    }

