//////////////////////////////////////////////////////////////////////////////////////////
// Generated By:	MCIT\mmabdelmalek using Mcit Generator
// Class Name:		Users_Permission_DB
// Date Generated:	15-10-2012
//////////////////////////////////////////////////////////////////////////////////////////
using System;
using System.Data.SqlClient;
using System.Data;


    public static class Users_Permission_DB
    {
        public static DataTable Select_by_pmp_pmp_id(int pmp_pmp_id)
        {

            return SqlHelper.ExecuteDataset(Database.ConnectionString, "Users_Permission_Select_by_pmp_pmp_id", pmp_pmp_id).Tables[0];

        }
        #region "Private methods"

        private static Users_Permission_DT FillInfoObject(SqlDataReader dr)
        {

           Users_Permission_DT obj_Users_Permission_DT = new Users_Permission_DT();

           
		obj_Users_Permission_DT.ID = Convert.ToInt32(dr[Users_Permission_DT.Enum_Users_Permission_DT.ID.ToString()]);
		obj_Users_Permission_DT.pmp_pmp_id = dr[Users_Permission_DT.Enum_Users_Permission_DT.pmp_pmp_id.ToString()] == DBNull.Value ? 0 : Convert.ToInt32(dr[Users_Permission_DT.Enum_Users_Permission_DT.pmp_pmp_id.ToString()]);
		obj_Users_Permission_DT.Page_ID = dr[Users_Permission_DT.Enum_Users_Permission_DT.Page_ID.ToString()] == DBNull.Value ? 0 : Convert.ToInt32(dr[Users_Permission_DT.Enum_Users_Permission_DT.Page_ID.ToString()]);

           return obj_Users_Permission_DT;
        }

        private static SqlParameter[] GetParameters(Users_Permission_DT obj)
        {
            SqlParameter[] parms = new SqlParameter[3];
           
			
        

        parms[0] = new SqlParameter(Users_Permission_DT.Enum_Users_Permission_DT.ID.ToString(), obj.ID);
        parms[0].Direction = ParameterDirection.InputOutput;

        parms[1] = new SqlParameter(Users_Permission_DT.Enum_Users_Permission_DT.pmp_pmp_id.ToString(), obj.pmp_pmp_id);

        parms[2] = new SqlParameter(Users_Permission_DT.Enum_Users_Permission_DT.Page_ID.ToString(), obj.Page_ID);
            
            return parms;
        }

        #endregion

	    #region "DB methods"

        public static int Save(Users_Permission_DT obj)
        {
            try
            {
                SqlParameter[] parms = GetParameters(obj);

                SqlHelper.ExecuteScalar(Database.ConnectionString, CommandType.StoredProcedure, "Users_Permission_Save", parms);

             	    obj.ID = Convert.ToInt32(parms[0].Value) ; 

           return obj.ID ;
            }
            catch (Exception ex)
            {

                return -1;
            }
        }

        public static int Delete(int Users_Permission_ID)
        {
            try
            {
                SqlHelper.ExecuteNonQuery(Database.ConnectionString, "Users_Permission_Delete", Users_Permission_ID);
                return Users_Permission_ID;
            }
            catch (Exception ex)
            {

                return -1;
            }
        }

        public static DataTable SelectAll()
        {
            try
            {
				 return SqlHelper.ExecuteDataset(Database.ConnectionString, "Users_Permission_Select", 0).Tables[0];
		
            }
            catch (Exception ex)
            {

                return null;
            }
        }

        public static Users_Permission_DT SelectByID(int Users_Permission_ID)
        {
            try
            {
              if (Users_Permission_ID > 0)
                {
                SqlDataReader drTableName;
                Users_Permission_DT oInfo_Users_Permission_DT = new Users_Permission_DT();

                drTableName = SqlHelper.ExecuteReader(Database.ConnectionString, "Users_Permission_Select", Users_Permission_ID);
                if (drTableName != null)
                {
                    while (drTableName.Read())
                    {
                        oInfo_Users_Permission_DT = FillInfoObject(drTableName);
                    }

                    drTableName.Close();
                }
                return oInfo_Users_Permission_DT;
               }
                else
                    return new Users_Permission_DT();
            }
            catch (Exception ex)
            {

                return null;
            }
        }
	#endregion


    }

