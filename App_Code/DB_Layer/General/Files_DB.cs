//////////////////////////////////////////////////////////////////////////////////////////
// Generated By:	MCIT\MElshahed using Mcit Generator
// Class Name:		Files_DB
// Date Generated:	26-03-2013
//////////////////////////////////////////////////////////////////////////////////////////
using System;
using System.Data.SqlClient;
using System.Data;


    public static class Files_DB
    {

        #region "Private methods"

        private static Files_DT FillInfoObject(SqlDataReader dr)
        {

           Files_DT obj_Files_DT = new Files_DT();

           
		obj_Files_DT.Files_id = Convert.ToInt32(dr[Files_DT.Enum_Files_DT.Files_id.ToString()]);
		obj_Files_DT.File_note = dr[Files_DT.Enum_Files_DT.File_note.ToString()] == DBNull.Value ? null : Convert.ToString(dr[Files_DT.Enum_Files_DT.File_note.ToString()]);
		obj_Files_DT.File_date = dr[Files_DT.Enum_Files_DT.File_date.ToString()] == DBNull.Value ? string.Empty : Convert.ToString(dr[Files_DT.Enum_Files_DT.File_date.ToString()]);
		obj_Files_DT.File_Name = dr[Files_DT.Enum_Files_DT.File_Name.ToString()] == DBNull.Value ? string.Empty : Convert.ToString(dr[Files_DT.Enum_Files_DT.File_Name.ToString()]);

           return obj_Files_DT;
        }

        private static SqlParameter[] GetParameters(Files_DT obj)
        {
            SqlParameter[] parms = new SqlParameter[4];
           
			
        

        parms[0] = new SqlParameter(Files_DT.Enum_Files_DT.Files_id.ToString(), obj.Files_id);
        parms[0].Direction = ParameterDirection.InputOutput;

        parms[1] = new SqlParameter(Files_DT.Enum_Files_DT.File_note.ToString(), obj.File_note);

        parms[2] = new SqlParameter(Files_DT.Enum_Files_DT.File_date.ToString(), obj.File_date);

        parms[3] = new SqlParameter(Files_DT.Enum_Files_DT.File_Name.ToString(), obj.File_Name);
            
            return parms;
        }

        #endregion

	    #region "DB methods"

        public static int Save(Files_DT obj)
        {
            try
            {
                SqlParameter[] parms = GetParameters(obj);

                SqlHelper.ExecuteScalar(Database.ConnectionString, CommandType.StoredProcedure, "Files_Save", parms);

             	    obj.Files_id = Convert.ToInt32(parms[0].Value) ; 

           return obj.Files_id ;
            }
            catch (Exception ex)
            {

                return -1;
            }
        }

        public static int Delete(int Files_ID)
        {
            try
            {
                SqlHelper.ExecuteNonQuery(Database.ConnectionString, "Files_Delete", Files_ID);
                return Files_ID;
            }
            catch (Exception ex)
            {

                return -1;
            }
        }

        public static DataTable SelectAll()
        {
            try
            {
				 return SqlHelper.ExecuteDataset(Database.ConnectionString, "Files_Select", 0).Tables[0];
		
            }
            catch (Exception ex)
            {

                return null;
            }
        }

        public static DataTable SelectAllFileDocumnets(int id )
        {
            try
            {
                return SqlHelper.ExecuteDataset(Database.ConnectionString, "Get_All_Files_Q", id ).Tables[0];

            }
            catch (Exception ex)
            {

                return null;
            }
        }

        public static Files_DT SelectByID(int Files_ID)
        {
            try
            {
              if (Files_ID > 0)
                {
                SqlDataReader drTableName;
                Files_DT oInfo_Files_DT = new Files_DT();

                drTableName = SqlHelper.ExecuteReader(Database.ConnectionString, "Files_Select", Files_ID);
                if (drTableName != null)
                {
                    while (drTableName.Read())
                    {
                        oInfo_Files_DT = FillInfoObject(drTableName);
                    }

                    drTableName.Close();
                }
                return oInfo_Files_DT;
               }
                else
                    return new Files_DT();
            }
            catch (Exception ex)
            {

                return null;
            }
        }
	#endregion


    }

