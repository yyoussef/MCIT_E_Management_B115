//////////////////////////////////////////////////////////////////////////////////////////
// Generated By:	MCIT\nmsoltan using Mcit Generator
// Class Name:		Activities_Stages_DB
// Date Generated:	30-01-2013
//////////////////////////////////////////////////////////////////////////////////////////
using System;
using System.Data.SqlClient;
using System.Data;


    public static class Activities_Stages_DB
    {

        #region "Private methods"

        private static Activities_Stages_DT FillInfoObject(SqlDataReader dr)
        {

           Activities_Stages_DT obj_Activities_Stages_DT = new Activities_Stages_DT();

           
		obj_Activities_Stages_DT.id = Convert.ToInt32(dr[Activities_Stages_DT.Enum_Activities_Stages_DT.id.ToString()]);
		obj_Activities_Stages_DT.Actv_ID = dr[Activities_Stages_DT.Enum_Activities_Stages_DT.Actv_ID.ToString()] == DBNull.Value ? 0 : Convert.ToInt32(dr[Activities_Stages_DT.Enum_Activities_Stages_DT.Actv_ID.ToString()]);
		obj_Activities_Stages_DT.stage_id = dr[Activities_Stages_DT.Enum_Activities_Stages_DT.stage_id.ToString()] == DBNull.Value ? 0 : Convert.ToInt32(dr[Activities_Stages_DT.Enum_Activities_Stages_DT.stage_id.ToString()]);
		obj_Activities_Stages_DT.proj_id = dr[Activities_Stages_DT.Enum_Activities_Stages_DT.proj_id.ToString()] == DBNull.Value ? 0 : Convert.ToInt32(dr[Activities_Stages_DT.Enum_Activities_Stages_DT.proj_id.ToString()]);

           return obj_Activities_Stages_DT;
        }

        private static SqlParameter[] GetParameters(Activities_Stages_DT obj)
        {
            SqlParameter[] parms = new SqlParameter[4];
           
			
        

        parms[0] = new SqlParameter(Activities_Stages_DT.Enum_Activities_Stages_DT.id.ToString(), obj.id);
        parms[0].Direction = ParameterDirection.InputOutput;

        parms[1] = new SqlParameter(Activities_Stages_DT.Enum_Activities_Stages_DT.Actv_ID.ToString(), obj.Actv_ID);

        parms[2] = new SqlParameter(Activities_Stages_DT.Enum_Activities_Stages_DT.stage_id.ToString(), obj.stage_id);

        parms[3] = new SqlParameter(Activities_Stages_DT.Enum_Activities_Stages_DT.proj_id.ToString(), obj.proj_id);
            
            return parms;
        }

        #endregion

	    #region "DB methods"

        public static int Save(Activities_Stages_DT obj)
        {
            try
            {
                SqlParameter[] parms = GetParameters(obj);

                SqlHelper.ExecuteScalar(Database.ConnectionString, CommandType.StoredProcedure, "Activities_Stages_Save", parms);

             	    obj.id = Convert.ToInt32(parms[0].Value) ; 

           return obj.id ;
            }
            catch (Exception ex)
            {

                return -1;
            }
        }

        public static int Delete(int Activities_Stages_ID)
        {
            try
            {
                SqlHelper.ExecuteNonQuery(Database.ConnectionString, "Activities_Stages_Delete", Activities_Stages_ID);
                return Activities_Stages_ID;
            }
            catch (Exception ex)
            {

                return -1;
            }
        }
        //public static int Deletebystageid(int stage_id,int proj_id)
        //{
        //    try
        //    {
        //        SqlHelper.ExecuteNonQuery(Database.ConnectionString, "Activities_Stages_Deletebyid", stage_id, proj_id);
        //        return Activities_Stages_ID;
        //    }
        //    catch (Exception ex)
        //    {

        //        return -1;
        //    }
        //}
        public static DataTable SelectAll()
        {
            try
            {
				 return SqlHelper.ExecuteDataset(Database.ConnectionString, "Activities_Stages_Select", 0).Tables[0];
		
            }
            catch (Exception ex)
            {

                return null;
            }
        }



        public static DataTable Activities_Stages_ByProjID_Select(int proj_ID, int stage_id)
        {
            try
            {
                return SqlHelper.ExecuteDataset(Database.ConnectionString, "Activities_Stages_ByProjID_Select", proj_ID, stage_id).Tables[0];

            }
            catch (Exception ex)
            {

                return null;
            }
        }



        public static Activities_Stages_DT SelectByID(int Activities_Stages_ID)
        {
            try
            {
              if (Activities_Stages_ID > 0)
                {
                SqlDataReader drTableName;
                Activities_Stages_DT oInfo_Activities_Stages_DT = new Activities_Stages_DT();

                drTableName = SqlHelper.ExecuteReader(Database.ConnectionString, "Activities_Stages_Select", Activities_Stages_ID);
                if (drTableName != null)
                {
                    while (drTableName.Read())
                    {
                        oInfo_Activities_Stages_DT = FillInfoObject(drTableName);
                    }

                    drTableName.Close();
                }
                return oInfo_Activities_Stages_DT;
               }
                else
                    return new Activities_Stages_DT();
            }
            catch (Exception ex)
            {

                return null;
            }
        }

        public static Activities_Stages_DT Activities_Stages_ByID_Select(int Activities_ID , int stage_id)
        {
            try
            {
                if (Activities_ID > 0)
                {
                    SqlDataReader drTableName;
                    Activities_Stages_DT oInfo_Activities_Stages_DT = new Activities_Stages_DT();

                    drTableName = SqlHelper.ExecuteReader(Database.ConnectionString, "Activities_Stages_ByID_Select", Activities_ID, stage_id);
                    if (drTableName != null)
                    {
                        while (drTableName.Read())
                        {
                            oInfo_Activities_Stages_DT = FillInfoObject(drTableName);
                        }

                        drTableName.Close();
                    }
                    return oInfo_Activities_Stages_DT;
                }
                else
                    return new Activities_Stages_DT();
            }
            catch (Exception ex)
            {

                return null;
            }
        }

       


        #endregion


    }

