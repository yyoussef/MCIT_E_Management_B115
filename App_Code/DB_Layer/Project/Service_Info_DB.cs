//////////////////////////////////////////////////////////////////////////////////////////
// Generated By:	MCIT\Matta using Mcit Generator
// Class Name:		Service_Info_DB
// Date Generated:	26-06-2012
//////////////////////////////////////////////////////////////////////////////////////////
using System;
using System.Data.SqlClient;
using System.Data;


    public static class Service_Info_DB
    {

        #region "Private methods"

        private static Service_Info_DT FillInfoObject(SqlDataReader dr)
        {

           Service_Info_DT obj_Service_Info_DT = new Service_Info_DT();

           
		obj_Service_Info_DT.ID = Convert.ToInt64(dr[Service_Info_DT.Enum_Service_Info_DT.ID.ToString()]);
		obj_Service_Info_DT.Service_Type = dr[Service_Info_DT.Enum_Service_Info_DT.Service_Type.ToString()] == DBNull.Value ? 0 : Convert.ToInt64(dr[Service_Info_DT.Enum_Service_Info_DT.Service_Type.ToString()]);
		obj_Service_Info_DT.Project_Id = dr[Service_Info_DT.Enum_Service_Info_DT.Project_Id.ToString()] == DBNull.Value ? 0 : Convert.ToInt64(dr[Service_Info_DT.Enum_Service_Info_DT.Project_Id.ToString()]);
		obj_Service_Info_DT.Hot_Line = dr[Service_Info_DT.Enum_Service_Info_DT.Hot_Line.ToString()] == DBNull.Value ? string.Empty : Convert.ToString(dr[Service_Info_DT.Enum_Service_Info_DT.Hot_Line.ToString()]);
		obj_Service_Info_DT.Service_Steps = dr[Service_Info_DT.Enum_Service_Info_DT.Service_Steps.ToString()] == DBNull.Value ? string.Empty : Convert.ToString(dr[Service_Info_DT.Enum_Service_Info_DT.Service_Steps.ToString()]);
		obj_Service_Info_DT.Contact_Us = dr[Service_Info_DT.Enum_Service_Info_DT.Contact_Us.ToString()] == DBNull.Value ? string.Empty : Convert.ToString(dr[Service_Info_DT.Enum_Service_Info_DT.Contact_Us.ToString()]);
		obj_Service_Info_DT.Project_Location = dr[Service_Info_DT.Enum_Service_Info_DT.Project_Location.ToString()] == DBNull.Value ? string.Empty : Convert.ToString(dr[Service_Info_DT.Enum_Service_Info_DT.Project_Location.ToString()]);

           return obj_Service_Info_DT;
        }

        private static SqlParameter[] GetParameters(Service_Info_DT obj)
        {
            SqlParameter[] parms = new SqlParameter[7];
           
			
        

        parms[0] = new SqlParameter(Service_Info_DT.Enum_Service_Info_DT.ID.ToString(), obj.ID);
        parms[0].Direction = ParameterDirection.InputOutput;

        parms[1] = new SqlParameter(Service_Info_DT.Enum_Service_Info_DT.Service_Type.ToString(), obj.Service_Type);

        parms[2] = new SqlParameter(Service_Info_DT.Enum_Service_Info_DT.Project_Id.ToString(), obj.Project_Id);

        parms[3] = new SqlParameter(Service_Info_DT.Enum_Service_Info_DT.Hot_Line.ToString(), obj.Hot_Line);

        parms[4] = new SqlParameter(Service_Info_DT.Enum_Service_Info_DT.Service_Steps.ToString(), obj.Service_Steps);

        parms[5] = new SqlParameter(Service_Info_DT.Enum_Service_Info_DT.Contact_Us.ToString(), obj.Contact_Us);

        parms[6] = new SqlParameter(Service_Info_DT.Enum_Service_Info_DT.Project_Location.ToString(), obj.Project_Location);
            
            return parms;
        }

        #endregion

	    #region "DB methods"

        public static int Save(Service_Info_DT obj)
        {
            try
            {
                SqlParameter[] parms = GetParameters(obj);

                SqlHelper.ExecuteScalar(Database.ConnectionString, CommandType.StoredProcedure, "Service_Info_Save", parms);

             	    obj.ID = Convert.ToInt32(parms[0].Value) ; 

           return Convert.ToInt32( obj.ID );
            }
            catch (Exception ex)
            {

                return -1;
            }
        }

        public static int Delete(int Service_Info_ID)
        {
            try
            {
                SqlHelper.ExecuteNonQuery(Database.ConnectionString, "Service_Info_Delete", Service_Info_ID);
                return Service_Info_ID;
            }
            catch (Exception ex)
            {

                return -1;
            }
        }

        public static DataTable SelectAll()
        {
            try
            {
				 return SqlHelper.ExecuteDataset(Database.ConnectionString, "Service_Info_Select", 0).Tables[0];
		
            }
            catch (Exception ex)
            {

                return null;
            }
        }

        public static Service_Info_DT SelectByID(int Service_Info_ID)
        {
            try
            {
              if (Service_Info_ID > 0)
                {
                SqlDataReader drTableName;
                Service_Info_DT oInfo_Service_Info_DT = new Service_Info_DT();

                drTableName = SqlHelper.ExecuteReader(Database.ConnectionString, "Service_Info_Select", Service_Info_ID);
                if (drTableName != null)
                {
                    while (drTableName.Read())
                    {
                        oInfo_Service_Info_DT = FillInfoObject(drTableName);
                    }

                    drTableName.Close();
                }
                return oInfo_Service_Info_DT;
               }
                else
                    return new Service_Info_DT();
            }
            catch (Exception ex)
            {

                return null;
            }
        }
	#endregion


    }

